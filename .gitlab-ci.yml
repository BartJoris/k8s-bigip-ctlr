variables:
  baseimg: "docker-registry.pdbld.f5net.com/${CI_PROJECT_NAMESPACE}/k8s-bigip-ctlr"

before_script:
  - 'if [ "$CI_BUILD_STAGE" != "deploy" ] && [ "$(id -u)" == "0" ]; then'
  # Only run if in a container
  # Use apt-cache server to speed things up
  - echo -e "Acquire::HTTP::Proxy \"http://apt-cache.pdbld.f5net.com:3142\";\nAcquire::HTTPS::Proxy \"false\";" > /etc/apt/apt.conf.d/01proxy
  - fi
  # Install ssh-agent if not already installed, it is required by Docker.
  # (change apt-get to yum if you use a CentOS-based image)
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

  # Run ssh-agent (inside the build environment)
  - eval $(ssh-agent -s)
  # Add the SSH key stored in TESTLAB_CI_SSH_PRIVATE_KEY variable to the agent store
  - ssh-add <(echo "$TESTLAB_CI_SSH_PRIVATE_KEY")
  - echo 'ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $*' > /tmp/ssh
  - chmod a+x /tmp/ssh
  - export GIT_SSH=/tmp/ssh

  - echo "Obtaining git submodules..."
  - git submodule sync --recursive
  - git submodule update --init --recursive

stages:
  - sanity
  - test
  - build
  - deploy

python utility unit test:
  image: "python:2.7"
  stage: test
  script:
    - pip install flake8
    - pip install -r python/k8s-build-requirements.txt
    - pip install -r python/k8s-runtime-requirements.txt
    - flake8 ./python/
    - cd python; PYTHONPATH=$PYTHONPATH:$PWD pytest -slvv
  tags:
    - docker

release build and unit test:
  stage: build
  tags:
    - docker-build
  script:
    - export BUILD_IMG_TAG="${baseimg}-devel:${CI_BUILD_REF}"
    - export CLEAN_BUILD=true
    - ./build-tools/build-runtime-artifacts.sh
  artifacts:
    paths:
      - coverage.out
      - coverage.html
      - bin/

# The official alpine image doesn't support race.
# Use a different build env for debug
debug build and unit test:
  image: "golang:latest"
  stage: build
  tags:
    - docker
  script:
    - echo "Installing GB..."
    - git clone https://bldr-git.int.lineratesystems.com/mirror/gb.git $GOPATH/src/github.com/constabulary/gb
    - git -C $GOPATH/src/github.com/constabulary/gb checkout 2b9e9134
    - go install -v github.com/constabulary/gb/...
    - make debug
  artifacts:
    paths:
      - coverage.out
      - coverage.html

sanity verification:
  image: "golang:latest"
  stage: sanity
  tags:
    - docker
  script:
    - echo "Installing GB..."
    - git clone https://bldr-git.int.lineratesystems.com/mirror/gb.git $GOPATH/src/github.com/constabulary/gb
    - git -C $GOPATH/src/github.com/constabulary/gb checkout 2b9e9134
    - go install -v github.com/constabulary/gb/...
    - make verify

# Create the docker container and upload it to the internal docker registry with the tags
#   <PROJ_NAMESPACE>/k8s-bigip-ctlr:<COMMIT_ID>
#   <PROJ_NAMESPACE>/k8s-bigip-ctlr:<BRANCH>
#   <PROJ_NAMESPACE>/k8s-bigip-ctlr:<BRANCH>-<BUILD_ID>
dockerize:
  stage: deploy
  tags:
    - docker-build
  script:
    - export IMG_TAG="${baseimg}:${CI_BUILD_REF}"
    - export BUILD_IMG_TAG="${baseimg}-devel:${CI_BUILD_REF}"
    - export CLEAN_BUILD=true
    - ./build-tools/build-runtime-images.sh
    - docker tag "$IMG_TAG" "$baseimg:$CI_BUILD_REF_NAME"
    - docker tag "$IMG_TAG" "$baseimg:$CI_BUILD_REF_NAME-$CI_BUILD_ID"
    - docker push "$IMG_TAG"
    - docker push "$baseimg:$CI_BUILD_REF_NAME"
    - docker push "$baseimg:$CI_BUILD_REF_NAME-$CI_BUILD_ID"
  dependencies:
    - release build and unit test
